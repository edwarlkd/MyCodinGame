#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <cctype>

using namespace std;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
  
double calcx(double x1, double x2)
{
 double result = (x2-x1)*(cos((x1+x2)/2));
 return result;
}

double calcy(double y1, double y2)
{
    double result = (y2- y1);
    return result;
}
double calcdistance(double x, double y)
{
    double result = sqrt((x*x)+(y*y));
    return (result*6371);
}

double replacecomma(string str)
{
    for(int i=0; i<str.size();i++)
    {
        if(str[i] == ',')
        {
         str[i] = '.';
         break;
        }
    }
    
    double result = stod(str.c_str()); //convert string digits to int//comma?    
    return result;
}
  
int main()
{
    string LON;
    cin >> LON; cin.ignore();
    string LAT;
    cin >> LAT; cin.ignore();
    int N;
    
    //!!! From LON and LAT, replace the comma.
    //then convert from 'String' to 'double'
    double lon = replacecomma(LON);
    double lat = replacecomma(LAT);
    
    vector<string> vectordefib;
    vector<double> vectordist;
    
    cin >> N; cin.ignore();
    for (int i = 0; i < N; i++) {
        string DEFIB;
        getline(cin, DEFIB);
        
        vectordefib.push_back(DEFIB);
        
     }


    cerr << "N: " << N << endl;
    cerr << "lon: " << lon << endl;
    cerr << "lat: " << lat << endl;
    cerr << "LON: " << LON << endl;
    cerr << "LAT: " << LAT << endl;
        
    //use for loop to go thru each defib
    //1. go thru each 'DEFIB' string and find(";;").
    //(now, you're at string[#] for longtitude.
    //(latitude) can be acquired find_from_last(";")
    for(int i=0;i<N;i++)
    {
        //fix this, find 2nd ";" from last
        //int longlocation = vectordefib[i].find(";;")+2;
        int latlocation = vectordefib[i].find_last_of(";")+1;
        int longlocation = vectordefib[i].find_last_of(";", latlocation-2)+1;
                
        
        //get the string numbers         
        string longstring = vectordefib[i].substr(longlocation, 16);
        string latstring = vectordefib[i].substr(latlocation,16);
        
        //remove the comma in that string
        longstring.erase(remove(longstring.begin(), longstring.end(), ','), longstring.end());
        latstring.erase(remove(latstring.begin(), latstring.end(), ','), latstring.end());
        
        //change them to integer
        double longint = stod(longstring.c_str());
        double latint = stod(longstring.c_str());
//        cerr << "longint: " << longint << endl;
 //       cerr << "latint: " << latint << endl;

        double x = calcx(lon, longint);
        double y = calcy(lat, latint);
        double disty = calcdistance(x,y);
        vectordist.push_back(disty);
    }
    
    //output for vectordist
    for(int i = 0; i<N;i++) //error, few comes out as neg
    {
        cerr << "vectordsit: " << vectordist[i] << endl;
    }

    //fuckkkk, might have to change to min_element
    //find the defib number with the smallest distance
    //(max_element) is an iterator ==> dereferenced
    auto smallest = std::min_element(std::begin(vectordist), std::end(vectordist));
    cerr << "Min element is " << *smallest
        << " at position " << std::distance(std::begin(vectordist), smallest) << std::endl;
    int minpos = distance(std::begin(vectordist), smallest);

    //lastly, output that defib name. 
    int filenamepos = vectordefib[minpos].find(";")+1; //position of filename
    int fileendpos = vectordefib[minpos].find(";", filenamepos);
    int difference = fileendpos-filenamepos;
    string result = vectordefib[minpos].substr(filenamepos, difference); //up to second of ;)
    
    cout << result << endl; 
}

// it doesn't work for other test cases.case
// need to accomodate all input data
// (find correct way to find long and lat from input
