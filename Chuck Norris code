#include <iostream>
#include <string>
#include <vector>
#include <cstdlib>
#include <algorithm>
#include <bitset>
#include <typeinfo>

using namespace std;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/ 
 

 
int main()
{
    string MESSAGE;
    getline(cin, MESSAGE);
    
    string text = MESSAGE; 
    string thebits = "";
    for(int i=0; i<text.length(); i++) {
    char s = text[i];
    bitset<7> bs(s);
    thebits += bs.to_string(); 
    }
    //so every index of 'vecint' is when binary respresentation changes (0 to 1, visavers)
    /*
        ex: 1 1 0 0 1 1 1
        vecint[0]: 0 00 ; two 1s at start
        vecint[1]: 00 00 ;two 0s following
        vecint[2]: 0 000 ; three 1s following
    */
    vector<string> vecoutput(1,"");
    string output = "";
    string ofzero = "00 ";
    string ofone = "0 ";
    char firstbit = thebits[0];
 /*   if(thebits[0] == '0') //initial value
    {
        ofzero+='0';
    }
    else if (thebits[0] == '1')
    {
        ofone+='0';   
    }*/

    cerr << firstbit << endl;
    cerr << thebits << endl;
    int j = 0;
    for(int i = 1; i<=thebits.size(); i++) //convert 
    { 
        //1000011
        //check with previous one if matches.matches
        if(thebits[i-1] == thebits[i]) //equal
        {
        cerr << "if called [i-1]==[i] ;;" << thebits[i-1] << "==" << thebits[i] << endl; 
            if(thebits[i] == '0')
            {
            ofzero+="0"; 
            ofone ="0 "; //reset the ofone.
            }
            else if(thebits[i] =='1')
            {
            ofone+="0";
            ofzero = "00 ";
            }
        }
        else //push for new vector since it change. 
        {
            cerr << "else called)))))))))))" << thebits[i-1] << "==" << thebits[i] << endl; 

            if(thebits[i-1] == '1') // ofone!="0 ". 
            {
                ofone+= '0';
                output = ofone; 
                
            }
            else if(thebits[i-1] == '0')
            {
                ofzero+='0';
                output = ofzero;
            }
           
        vecoutput[j] = output; 
        cerr << "vecoutput[" << j << "] = " << vecoutput[j] << endl;
        vecoutput.push_back(""); 
        j++;
        }
      
        cerr << "output = " << output << endl;
        cerr << "ofone = " << ofone << endl;
        cerr << "ofzero = " << ofzero << endl; 
        cerr << "================" << endl;
        //if 0 then add to the output. 
        //else if 1, then add to that output. 
    
    }  //end of for loop
    
    cerr << "vectoroutput size: " << vecoutput.size() << endl;
    cerr << "~~~~~~~~~~~~~~~~~" << endl;

    //output
    cerr << "output following with vecoutputsize: " << vecoutput.size() << endl;
    vecoutput.pop_back();
    for(int i = 0; i < vecoutput.size(); i++)
    {
     cerr << "vecoutput[" << i << "]: " << vecoutput[i] << endl;    
    }
    
    //result output
    //first empty last vector.
    
    for(int i = 0; i < vecoutput.size(); i++)
    {
     cout << vecoutput[i];  
     if(i != vecoutput.size()-1)
     {
         cout << " ";
     }
    }
    
}
