#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <locale> 

using namespace std;

string tolow(string str)
{
    locale loc;
    for (std::string::size_type i=0; i<str.length(); ++i)
    {
        str[i] = tolower(str[i],loc);
    }
    string result = str;

 return result;   
}

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
int main()
{
    int N; // Number of elements which make up the association table.
    cin >> N; cin.ignore();
    int Q; // Number Q of file names to be analyzed.
    cin >> Q; cin.ignore();
    
    cerr << "N: " << N << endl;
    cerr << "Q: " << Q << endl;
    
    //default input stuff
    vector<string> vecEXT;
    vector<string> vecMT;
    vector<string> vecFNAME;    

    //default 
    for (int i = 0; i < N; i++) {
        string EXT; // file extension
        string MT; // MIME type.
        cin >> EXT >> MT; cin.ignore();

        EXT = tolow(EXT);
        //MT = tolow(MT); //this one stays as it. 
        vecEXT.push_back(EXT);
        vecMT.push_back(MT);
    
        cerr << "EXT&MT = " << EXT << "   " << MT << endl;
    }       
    for (int i = 0; i < Q; i++) {
        string FNAME; // One file name per line.
        getline(cin, FNAME);
        
        FNAME = tolow(FNAME);
        vecFNAME.push_back(FNAME);    
    
        cerr << "Fname: " << FNAME << endl;       

    }

    //from file name, extract the name and extension.
    vector<string> vfilename;
    vector<string> vfileext;
    
    locale loc; //for lowercase

    for (int i= 0; i < vecFNAME.size(); i++)
    {
        int index = vecFNAME[i].find_last_of('.');

        vfilename.push_back(vecFNAME[i].substr(0, index));
        vfileext.push_back(vecFNAME[i].substr(index+1));

//    cerr << "Before tolow" << endl;
//    cerr << "vfilename[" << i << "] = " << vfilename[i] << endl;
//    cerr << "vfileext[" << i << "] = " << vfileext[i] << endl; 
     
        //lower case them all for test#2 
//        vfilename[i] = tolow(vfilename[i]);
//        vfileext[i] = tolow(vfileext[i]);
        
//    cerr << "Folowings are after tolower" << endl;
//    cerr << "vfilename[" << i << "] = " << vfilename[i] << endl;
//   cerr << "vfileext[" << i << "] = " << vfileext[i] << endl; 
        
        //then consider the correct division of filename mbc

    }
    
    //output
    vector<string> output;
    for(int i = 0; i < Q; i++) //using fileext
    {
        int unknowncter = 0;
        
        //vecEXT, vecMT, vecFNAME
        //if vecEXT[i] == 
        for(int j = 0; j< N; j++) //compare with vecEXT to see if matching found
        {
            unknowncter++;
            //if matching found
            if(vfileext[i] == vecEXT[j])
            {
                output.push_back(vecMT[j]);
                break;
            }
            if(unknowncter==N) //
            {
            //for unknown.
            //so if this second loop fails, then output unkonwn
                output.push_back("UNKNOWN");
                break;
            }
        }
        
    }

    cerr << "---------------output-----------" << endl;
    for(int i=0;i<output.size();i++)
    {
        cout << output[i] << endl;   
    }

}
