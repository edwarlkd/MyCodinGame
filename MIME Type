#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
int main()
{
    int N; // Number of elements which make up the association table.
    cin >> N; cin.ignore();
    int Q; // Number Q of file names to be analyzed.
    cin >> Q; cin.ignore();
    
    cerr << "N: " << N << endl;
    cerr << "Q: " << Q << endl;
    
    vector<string> ext;
    vector<string> mt;
    vector<string> filenames;
    
    vector<string> fileext;
    vector<string> filemt;
    vector<string> vectoroutput;
    vector<string> output;

    for (int i = 0; i < N; i++) {
        string EXT; // file extension
        string MT; // MIME type.
        cin >> EXT >> MT; cin.ignore();
        cerr << "EXT: " << EXT << " || MT: " << MT << endl;
        ext.push_back(EXT);
        mt.push_back(MT);
    }
    for (int i = 0; i < Q; i++) {
        string FNAME; // One file name per line.
        getline(cin, FNAME);
        cerr << "FNAME: " << FNAME << endl;
        
        filenames.push_back(FNAME); //just filenames collection.
        
        //just end part
        int pos = FNAME.find_last_of('.');
        cerr << "Pos: " << pos << endl; 
        string mtword = FNAME.substr(pos+1); //pos == location of '.'
        if(pos < 0)
        {
            fileext.push_back("");
        }
        else
        {
            fileext.push_back(mtword);
        }
        cerr << "mtword: " << mtword << endl;
        cerr << "nextloop------------------------------" << endl;
        //when pos is not foud for '.', mtword becomes FIRSTNAME
    }
    
    //defaults: ext, mt
    //variables: fileext, filemt, vectoroutput    
    
    for(int i = 0; i < Q; i++) //for # of files.
    {
        int count1 = 0;    
        for(int j = 0; j < N;j++) //for # of ext. 
        {
            if(fileext[i] == ext[j])
            {
                output.push_back(mt[j]);
                break;
            }
            //find a case for 'UNKNOWN'
            if(fileext[i] != ext[N-1] && j == N-1)
            {
                output.push_back("UNKNOWN");
            }
        }
        //cerr << "what: " << output[i] << endl;
    }
    
    
    //use for loop for Q numbers of file. 
    //read the file--- 1. ignore upto '.' 
    // 2. so read only the file extension
    //if it matches one of the option, output = that MT
    //else, 'UNKNOWN 
    
    //final output
    for(int i = 0; i < Q; i++)
    {
        cout << output[i] << endl;
    }
    
    
    
    
} //end of main
